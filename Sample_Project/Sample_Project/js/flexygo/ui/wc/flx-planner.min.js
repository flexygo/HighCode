var flexygo;!function(flexygo){var ui_1;ui_1=flexygo.ui||(flexygo.ui={}),(ui_1.wc||(ui_1.wc={})).FlxPlanner=class extends HTMLElement{constructor(){super(),this.connected=!1,this.groupsFilter="",this.draggablesFilter="",this.additionalWhere="",this.pendingCards=new Array,this.columns=new Array,this.draggablesIsRender=!1,this.isRendered=!1,this.isLoading=!1,this.timeModes={MONTH:"month",WEEK:"week"}}static get observedAttributes(){return["ObjectName","ObjectWhere","ModuleName"]}connectedCallback(){let element=$(this);this.connected=!0,this.objectName=element.attr("ObjectName"),this.objectWhere=element.attr("ObjectWhere"),this.moduleName=element.attr("ModuleName"),this.currentModeId=element.attr("plannerInitMode"),this.plannerInitDate=element.attr("plannerInitDate"),this.defaults=element.attr("defaults"),this.init()}attributeChangedCallback(attrName,oldVal,newVal){let needInit=!1;"modulename"==attrName.toLowerCase()&&newVal&&""!=newVal?(this.moduleName=newVal,needInit=!0):"objectname"==attrName.toLowerCase()&&newVal&&""!=newVal?(this.objectName=newVal,needInit=!0):"objectwhere"==attrName.toLowerCase()&&newVal&&""!=newVal?(this.objectWhere=newVal,needInit=!0):"plannerInitMode"==attrName.toLowerCase()&&newVal&&""!=newVal&&(this.currentModeId=newVal,needInit=!0),this.connected&&needInit&&this.init()}init(){try{let me=$(this);if(me.closest("flx-module").css("z-index",0),flexygo.utils.showLoadingEffect(1e10,me.closest("flx-module")),this.plannerInitDate||(this.plannerInitDate=moment().format("YYYY-MM-DD")),this.wcParentModule=me.closest("flx-module")[0],this.defaults)"string"==typeof this.defaults?this.objDef=JSON.parse(this.defaults):this.objDef=this.defaults;else{let histObj=flexygo.history.get(me);void 0!==histObj&&histObj.defaults&&("string"==typeof histObj.defaults?this.objDef=JSON.parse(flexygo.utils.parser.replaceAll(histObj.defaults,"'",'"')):this.objDef=histObj.defaults),null==this.objDef&&this.wcParentModule&&(this.objDef=this.wcParentModule.objectdefaults)}this.getPlannerConfig()}catch(ex){console.error("FlexyGo Planner",ex)}}refresh(){this.init()}getPlannerConfig(){let params={ObjectName:$(this).attr("ObjectName"),ObjectWhere:$(this).attr("ObjectWhere"),ModuleName:this.moduleName,Defaults:flexygo.utils.dataToArray(this.objDef),PageName:flexygo.history.getPageName($(this)),PlannerInitDate:moment(this.plannerInitDate).format("YYYY-MM-DD"),PlannerInitMode:this.currentModeId,TimeMode:this.currentTimemode,AdditionalWhere:this.additionalWhere,GroupsFilter:this.groupsFilter,DraggablesFilter:this.draggablesFilter,FilterValues:this.filterValues,SearchId:this.activeFilter};flexygo.ajax.post("~/api/Planner","GetPlanner",params,response=>{if(response)if(this.plannerId=response.PlannerId,response.ErrorMessage){let html=`<div class="" id="pln-error-cont">\n                                        <span class="pln-error-msg">${response.ErrorMessage}</span>\n                                        <div class="pln-error-conf">\n                                            <i class="flx-icon icon-settings3 pln-error-conf-icon"></i>\n                                            <span class="pln-error-conf-txt">${flexygo.localization.translate("flxplanner.noconf")}</span>\n                                        </div>\n                                    </div>`;$(this).html(html),$(this).find(".pln-error-conf").on("click",e=>{this.configure()})}else this.objectName=response.PlannerObject,this.objectWhere=response.PlannerWhere,this.PlannerName=response.PlannerName,this.MonthView=response.MonthView,this.plannerModesSettings=response.PlannerModes,this.plannerTitle=response.PlannerTitle,this.currentModeId=response.PlannerInitMode,this.plannerInitDate=moment(response.PlannerInitDate).format("YYYY-MM-DD"),this.currentTimemode=response.TimeMode,this.dateStart=moment(response.StartDate).toDate(),this.dateEnd=moment(response.EndDate).toDate(),this.plannerSettings=response,this.lastLoaded=response.PageSize,this.pageSize=response.PageSize,this.collectionName=response.CollectionName,this.toolbar=response.Toolbar,this.searchSettings=response.SearchSettings,this.firstColumnInfo=flexygo.utils.isBlank(response.ItemGroups)?[]:response.ItemGroups,this.cardList=response.Items,this.pendingCards=response.Items.Items,this.currentModeSettings=this.plannerModesSettings.find(element=>element.ModeId===this.currentModeId),this.wcParentModule.setButtons(this.toolbar,this.objectName,this.objectWhere),this.loadFilters(),this.draggablesIsRender=!1,this.isRendered=!1,this.render()},null,()=>{flexygo.utils.removeLoadingEffect(this.closest("flx-module"))})}render(){this.drawBoard(),this.drawRows(),this.mainEvents()}setFilter(){this.init()}drawBoard(){$(this),this.plannerTitle,flexygo.utils.isBlank(this.objDef)||(this.currentModeSettings.ModeTitleTemplate=flexygo.utils.parser.recursiveCompile(this.objDef,this.currentModeSettings.ModeTitleTemplate));let html=`\n            <div id="planner-title">\n                ${this.currentModeSettings.ModeTitleTemplate}\n                </div>\n            <section id="planner-main-container">\n                <aside id="planner-withoutgroup" class="folded hidden">\n                    <div id="planner-withoutgroup-title"><h4>${flexygo.localization.translate("flxplanner.draggables")}</h4></div>\n                    <div id="planner-items-container"></div>\n                    <div id="planner-withoutgroup-fold"><i class="flx-icon icon-arrow-head-5"></i></div>\n                </aside>\n                <div class="" id="planner-main" modeid="${this.currentModeId}">\n                    <div class="pln-header-btns">\n                        <div class="pln-time-btns">${this.drawTimeModeButtons()}</div>\n                        <div class="pln-mode-btns">${this.drawModesButtons()}</div>\n                    </div>\n                    <div class="pln-table">${this.drawTable()}</div>\n                </div>\n            </section>`;this.componentHTML=html,$(this).html(this.componentHTML)}drawModesButtons(){let modeBtns="";return this.plannerModesSettings.forEach(element=>{modeBtns+=`<button class="pln-mode-btn ${element.ModeId==this.currentModeId?"current":""}" modeid="${element.ModeId}">${element.ModeName}</button>`}),modeBtns+='<button class="develop-only pln-config" id="config-btn"><i class="flx-icon icon-settings-2"></i></button>'}drawTimeModeButtons(){let buttons="";return buttons=`<button class="pln-btn-schedule clickable" id="btn-back"><i class="flx-icon icon-previous-1"></i></button>\n                            <button class="pln-btn-schedule clickable" id="btn-today">${flexygo.localization.translate("flxplanner.today")}</button>\n                            <button class="pln-btn-schedule clickable" id="btn-foward"><i class="flx-icon icon-next-1"></i></button>    \n`,this.plannerSettings.MonthView&&(buttons+=`<button class="pln-btn-viewmode clickable ${this.currentTimemode===this.timeModes.WEEK?"current":""}" timemodeid="week">${flexygo.localization.translate("flxplanner.week")}</button>\n                           <button class="pln-btn-viewmode clickable ${this.currentTimemode===this.timeModes.MONTH?"current":""}" timemodeid="month">${flexygo.localization.translate("flxplanner.month")}</button>`),buttons}drawTable(){this.columns=new Array;for(let c=moment(this.dateStart);c.diff(this.dateEnd,"days")<=0;c.add(1,"days"))this.columns.push(moment(c).toDate());let showInput=-1!==navigator.userAgent.indexOf("Chrome"),firstCell=`<th class="pln-empty-cell">\n                                <div class="pln-month-cont">\n                                    <span class="pln-month ${showInput&&this.currentTimemode===this.timeModes.MONTH?"hidden":""}"> ${moment(this.dateStart).format("MMMM").toLocaleUpperCase()}</span> &nbsp;\n                                    <span class="pln-month ${showInput?"hidden":""}"> ${moment(this.dateStart).format("YYYY").toLocaleUpperCase()}</span>\n                                    <input class="${showInput&&this.currentTimemode===this.timeModes.MONTH?"":"hidden"}" type="month" value="${moment(this.dateStart).format("YYYY").toLocaleUpperCase()}-${moment(this.dateStart).format("MM").toLocaleUpperCase()}"/>\n                                    <input class="${showInput&&this.currentTimemode===this.timeModes.WEEK?"":"hidden"}" type="week" value="${moment(this.dateStart).format("YYYY").toLocaleUpperCase()}-W${moment(this.dateStart).format("WW")}"/>\n                                </div></th>`,cells="";this.columns.forEach(element=>{let tooltip="";if(!flexygo.utils.isBlank(this.currentModeSettings.DayMenuTemplate)){let dayMenuTemplate=flexygo.utils.parser.recursiveCompile({PlannerDate:moment(element).format("YYYY-MM-DD")},this.currentModeSettings.DayMenuTemplate);flexygo.utils.isBlank(this.objDef)||(dayMenuTemplate=flexygo.utils.parser.recursiveCompile(this.objDef,dayMenuTemplate)),tooltip=`<span class="pln-btn-menu">\n                        <i class="flx-icon icon-more clickable"></i>\n                        <flx-tooltip mode="popover" container="body">${dayMenuTemplate}</flx-tooltip>\n                    </span>`}cells+=`<th class="pln-date ${moment(element).format("YYYY-MM-DD")==moment().format("YYYY-MM-DD")?"currentDay":""}" datecolumn="${moment(element).format("YYYY-MM-DD")}">\n                                <div>\n                                    <span class="pln-date-day">${moment(element).format("ddd").replace(".","")}</span>\n                                    <span class="pln-date-day-number">${moment(element).format("D").replace(".","")}</span>\n                                    ${tooltip}\n                                </div>\n                          </th>`});let firstRow=`<tr>${firstCell}${cells}</tr>`;return`\n            <table>\n                <thead>\n                    \x3c!--<tr class="pln-month-info">\n                        <th colspan="100%">\n                            <span class="pln-month"> ${moment(this.dateStart).format("MMMM").toLocaleUpperCase()}</span> &nbsp;\n                            <span class="pln-month"> ${moment(this.dateStart).format("YYYY").toLocaleUpperCase()}</span>\n                        </th>\n                    </tr>--\x3e\n                    ${firstRow}\n                </thead>\n                <tbody></tbody>\n            </table>`}drawRows(){let rows="";this.isLoading=!0;let toLoadRows=this.pageSize;if(this.lastLoaded>this.firstColumnInfo.length&&(toLoadRows=this.firstColumnInfo.length-(this.lastLoaded-toLoadRows),this.lastLoaded=this.firstColumnInfo.length,this.isRendered=!0),this.lastLoaded<=this.firstColumnInfo.length){for(let i=this.lastLoaded-toLoadRows;i<this.lastLoaded;i++){let e=this.firstColumnInfo[i],descrip=flexygo.utils.parser.recursiveCompile(e,this.currentModeSettings.FirstColTemplate);descrip=flexygo.utils.parser.recursiveCompile({PlannerMode:this.currentTimemode},descrip),flexygo.utils.isBlank(this.objDef)||(descrip=flexygo.utils.parser.recursiveCompile(this.objDef,descrip)),rows+=`<tr> <th class="pln-cell pln-group-cell" rowidfield="${this.currentModeSettings.FirstColId}" rowidvalue="${e[this.currentModeSettings.FirstColId]}" firstcolumn >\n                                    \x3c!--<span class="pln-btn-menu clickable"><i class="flx-icon icon-more icon-rotate-90"></i></span>--\x3e\n                                    ${descrip}\n                                </th>`,this.columns.forEach(element=>{let tooltip="";if(!flexygo.utils.isBlank(this.currentModeSettings.CellMenuTemplate)){let cellMenuTemplate=flexygo.utils.parser.recursiveCompile({PlannerDate:moment(element).format("YYYY-MM-DD"),GroupId:e[this.currentModeSettings.FirstColId]},this.currentModeSettings.CellMenuTemplate);flexygo.utils.isBlank(this.objDef)||(cellMenuTemplate=flexygo.utils.parser.recursiveCompile(this.objDef,cellMenuTemplate)),tooltip=`<span class="pln-btn-menu">\n                                <i class="flx-icon icon-more clickable"></i>\n                                <flx-tooltip mode="popover" container="body">${cellMenuTemplate}</flx-tooltip>\n                            </span>`}rows+=`<th class="pln-cell pln-date-cell ${moment(element).format("YYYY-MM-DD")==moment().format("YYYY-MM-DD")?"currentDay":""}" datecolumn="${moment(element).format("YYYY-MM-DD")}" rowidfield="${this.currentModeSettings.FirstColId}" rowidvalue="${e[this.currentModeSettings.FirstColId]}">\n                                        ${tooltip}\n                                    </th>`}),rows+="</tr>"}this.lastLoaded+=this.pageSize,$(this).find("tbody").append($(rows))}this.currentModeSettings.CardsMode.forEach(cardConfig=>{let cards=this.pendingCards.filter(card=>card._cardconfigid==cardConfig.ModeCardId);if(this.draggablesIsRender=!1,cards.forEach(card=>{let date=moment(card[cardConfig.CardDateField.toLocaleLowerCase()]).format("YYYY-MM-DD"),rowIdField=cardConfig.CardRowId,rowId=card[rowIdField],customClass=flexygo.utils.isBlank(cardConfig.CardClassNameField)?"":flexygo.utils.isBlank(card[cardConfig.CardClassNameField])?"":card[cardConfig.CardClassNameField],customStyle=flexygo.utils.isBlank(cardConfig.CardStyleField)?"":flexygo.utils.isBlank(card[cardConfig.CardStyleField])?"":card[cardConfig.CardStyleField],cell=$(this).find(`[datecolumn="${date}"][rowidfield="${rowIdField}"][rowidvalue="${rowId}"]`);if(cell.length>0){let descrip=flexygo.utils.parser.recursiveCompile(card,cardConfig.CardTemplate);if(descrip=flexygo.utils.parser.recursiveCompile({PlannerMode:this.currentTimemode},descrip),flexygo.utils.isBlank(this.objDef)||(descrip=flexygo.utils.parser.recursiveCompile(this.objDef,descrip)),cell.find(".pln-card")[0]&&cell.find(".pln-card")[0].plannerCardData.priority==cardConfig.Order.toString()||0==$(cell).find(".pln-card").length){let cardTemplate;cardTemplate=cardConfig.Editable?$(`<div class="pln-card pln-sortable ${customClass}" style="${customStyle}">\n                                        <span class="pln-card-edit clickable"><i class="flx-icon icon-pencil txt-notify icon-zoom-115"></i></span>\n                                        <span class="pln-card-delete clickable"><i class="fa fa-close txt-danger icon-zoom-115"></i></span>\n                                        ${descrip}\n                                    </div>`)[0]:$(`<div class="pln-card ${customClass}" style="${customStyle}">\n                                        ${descrip}\n                                    </div>`)[0],this.setCardData(cardTemplate,card,cardConfig),cell.append(cardTemplate)}this.pendingCards=this.pendingCards.filter(item=>item!==card)}}),!this.draggablesIsRender){let draggablecards=this.cardList.ItemsDraggable.filter(card=>card._cardconfigid==cardConfig.ModeCardId);draggablecards.length>0&&($(this).find("aside").removeClass("hidden"),$(this).find("#planner-withoutgroup #planner-items-container").append(`<div class="pln-draggable-item-container" id="pln-draggable-${cardConfig.ModeCardId}"><span class="pln-draggable-item-title">${cardConfig.DraggableTitle}</span></div>`),draggablecards.forEach(card=>{let dragableContainer=$(`#pln-draggable-${cardConfig.ModeCardId}`),descrip=flexygo.utils.parser.recursiveCompile(card,cardConfig.DraggableTemplate);flexygo.utils.isBlank(this.objDef)||(descrip=flexygo.utils.parser.recursiveCompile(this.objDef,descrip));let cardTemplate=$(`<div class="pln-card pln-card-draggable clickable" draggableidfield="${cardConfig.DraggableObjectId}" draggableidvalue="${card[cardConfig.DraggableObjectId]}" draggableobjectname="${cardConfig.DraggableCollection}">${descrip}</div>`)[0];this.setCardData(cardTemplate,card,cardConfig,!0),dragableContainer.append(cardTemplate)})),this.draggablesIsRender=!0}})}mainEvents(){let me=$(this);this.timeButtonsEvents(),this.modesButtonsEvents(),this.isRendered?me.find(".pln-table").off("scroll"):me.find(".pln-table").off("scroll").on("scroll",ev=>{$(ev.currentTarget).scrollTop()+$(ev.currentTarget).innerHeight()>=$(ev.currentTarget)[0].scrollHeight&&(this.isLoading||(flexygo.utils.showLoadingEffect(1e10,me.closest("flx-module")),setTimeout(()=>{this.drawRows(),this.mainEvents()},500)))}),this.isLoading=!1,me.find("button#config-btn").on("click",e=>{this.configureMode()}),me.find("#planner-withoutgroup-fold").off("click").on("click",()=>{let itemsWithoutGroup=me.find("#planner-withoutgroup");itemsWithoutGroup.hasClass("folded")?itemsWithoutGroup.removeClass("folded"):itemsWithoutGroup.addClass("folded")}),me.find(".pln-date-cell[datecolumn]").off("dblclick").on("dblclick",e=>{let me=this,cell=$(e.currentTarget),modeStg=me.currentModeSettings.CardsMode.filter(card=>card.Editable);if(modeStg.length>1){let myButtons=new Object,buttons="";modeStg.forEach(mode=>{myButtons[mode.CardColName]={ObjectName:mode.CardColName,Descrip:mode.CardEntityConfiguration.Descrip,GroupField:mode.CardRowId,DateField:mode.CardDateField.toLocaleLowerCase(),IconClass:mode.CardEntityConfiguration.Icon},buttons+=`<button class="btn btn-default bg-outstanding margin-s planner-objects-action" objectName="${mode.CardColName}">\n                                        <i class="${myButtons[mode.CardColName].IconClass}"></i>\n                                        ${myButtons[mode.CardColName].Descrip}\n                                    </button>`}),$.sweetModal({title:flexygo.localization.translate("flxplanner.chooseobject"),content:"<div>"+buttons+"</div>",width:"35%"}),$(".planner-objects-action").click(function(e){let object=myButtons[$(e.currentTarget).attr("objectName")];me.openEvent(object.ObjectName,object.GroupField,object.DateField,cell.attr("rowidvalue"),cell.attr("datecolumn")),$(".sweet-modal-overlay").remove()})}else 1==modeStg.length&&me.openEvent(modeStg[0].CardColName,modeStg[0].CardRowId,modeStg[0].CardDateField.toLocaleLowerCase(),cell.attr("rowidvalue"),cell.attr("datecolumn"))}),me.find(".pln-card .pln-card-delete i").off("click").on("click",e=>{this.objectActions($(e.currentTarget).closest(".pln-card")[0],"delete")}),me.find(".pln-card .pln-card-edit i").off("click").on("click",e=>{this.objectActions($(e.currentTarget).closest(".pln-card")[0],"edit")}),me.find(".pln-cell.pln-date-cell:not(.pln-cell-sortable)").sortable({connectWith:".pln-cell.pln-date-cell",items:"> .pln-card.pln-sortable",start:function(event,ui){ui.placeholder.html(ui.item.html())},update:(event,ui)=>{flexygo.utils.isBlank(ui.sender)&&this.objectActions(ui.item[0],"update")}}).disableSelection(),me.find(".pln-cell.pln-date-cell:not(.pln-cell-sortable)").addClass("pln-cell-sortable"),me.find("#planner-items-container:not(.pln-container-sortable)").sortable({connectWith:".pln-cell.pln-date-cell",items:".pln-draggable-item-container > .pln-card",start:function(event,ui){ui.placeholder.html(ui.item.html())},update:(event,ui)=>{flexygo.utils.isBlank(ui.sender)&&this.objectActions(ui.item[0],"insert")}}).disableSelection(),me.find("#planner-items-container:not(.pln-container-sortable)").addClass("pln-container-sortable"),this.dragScroll(),flexygo.utils.removeLoadingEffect(me.closest("flx-module"))}timeButtonsEvents(){let me=$(this);me.find(".pln-time-btns .pln-btn-schedule").off("click").on("click",e=>{switch($(e.currentTarget).attr("id")){case"btn-back":this.currentTimemode===this.timeModes.WEEK?this.plannerInitDate=moment(this.plannerInitDate).subtract(7,"days").toDate().toString():this.currentTimemode===this.timeModes.MONTH&&(this.plannerInitDate=moment(this.plannerInitDate).subtract(1,"month").toString());break;case"btn-foward":this.currentTimemode===this.timeModes.WEEK?this.plannerInitDate=moment(this.plannerInitDate).add(7,"days").toDate().toString():this.currentTimemode===this.timeModes.MONTH&&(this.plannerInitDate=moment(this.plannerInitDate).add(1,"month").toDate().toString());break;default:this.plannerInitDate=moment().toDate().toString()}this.init()}),me.find(".pln-time-btns .pln-btn-viewmode").off("click").on("click",e=>{switch($(e.currentTarget).attr("timemodeid")){case"week":this.currentTimemode=this.timeModes.WEEK;break;case"month":this.currentTimemode=this.timeModes.MONTH}this.init()}),me.find("thead .pln-month-cont input").off("change").on("change",e=>{let newDate=$(e.currentTarget).val();if(!flexygo.utils.isBlank(newDate)){if(this.currentTimemode===this.timeModes.WEEK){let year=newDate.split("-")[0],week=newDate.split("-")[1].replace("W","");this.plannerInitDate=moment().year(year).week(week).day("Monday").format("YYYY-MM-DD")}else this.currentTimemode===this.timeModes.MONTH&&(this.plannerInitDate=moment(newDate).format("YYYY-MM-DD"));this.init()}})}modesButtonsEvents(){let me=$(this);this.plannerModesSettings.forEach(mode=>{me.find(`button[modeid=${mode.ModeId}]`).off("click").on("click",e=>{this.currentModeId=mode.ModeId,this.init()})})}openEvent(objectName,GroupField,DateField,GroupId,DateInfo){let defaults={[GroupField]:GroupId,[DateField]:DateInfo};flexygo.nav.openPage("edit",objectName,null,JSON.stringify(defaults),"modal1024x768",!1,$(this))}showContextMenu(template,e){let plannerContext=$("flx-contextmenu"),plannerContext0=plannerContext[0];plannerContext0.createMenu($(e)),plannerContext0.menu.html(`<div class="pln-context-menu">${template}</div>`),plannerContext.show()}setCardData(card,cardData,cardConfig,isnew=!1){let id=new Array;card.plannerCardData={id:null,modeCardId:cardConfig.ModeCardId,objectName:cardConfig.CardColName,groupField:cardConfig.CardRowId,groupId:cardData[cardConfig.CardRowId],dateField:cardConfig.CardDateField.toLocaleLowerCase(),priority:cardConfig.Order,idField:cardConfig.CardId,onAddFunction:cardConfig.OnAddFunction,onMoveFunction:cardConfig.OnMoveFunction,onDeleteFunction:cardConfig.OnDeleteFunction,entityConfiguration:null,data:cardData},isnew?(cardConfig.DraggableEntityConfiguration.ObjectKeys.forEach(key=>id.push({[key.toLocaleLowerCase()]:cardData[key.toLocaleLowerCase()]})),card.plannerCardData.entityConfiguration=cardConfig.DraggableEntityConfiguration):(cardConfig.CardEntityConfiguration.ObjectKeys.forEach(key=>id.push({[key.toLocaleLowerCase()]:cardData[key.toLocaleLowerCase()]})),card.plannerCardData.entityConfiguration=cardConfig.CardEntityConfiguration),card.plannerCardData.id=JSON.stringify(id)}objectActions(e,mode){let card=e,cellContainer=$(e).closest("th"),groupId=cellContainer.attr("rowidvalue"),dateInfo=cellContainer.attr("datecolumn"),obj=new flexygo.obj.Entity(card.plannerCardData.entityConfiguration.ObjectName,flexygo.utils.isJSON(card.plannerCardData.id.toString())?this.getObjectWhere(card):null);switch(mode){case"insert":let onAddFunction=card.plannerCardData.onAddFunction;obj.read(),flexygo.utils.isBlank(onAddFunction)?flexygo.msg.warning(flexygo.localization.translate("flxplanner.addempty")):flexygo.utils.execAsyncFunction(onAddFunction,["entity","groupId","plannerDate","triggerElement"],[obj,groupId,dateInfo,$(card)]).then(newData=>{newData&&(this.setCardData(card,newData,this.currentModeSettings.CardsMode.find(element=>element.ModeCardId===card.plannerCardData.modeCardId)),this.highlightItem(card,flexygo.colors.success)),this.refreshDraggrableGroup(card.plannerCardData.modeCardId),this.refreshCell(this.currentModeId,groupId,dateInfo)}).catch(err=>{flexygo.msg.error(flexygo.utils.getErrorMessage(err))});break;case"update":if(!$(card).hasClass("pln-carg-draggable")){obj.read();let onMoveFunction=card.plannerCardData.onMoveFunction;flexygo.utils.isBlank(onMoveFunction)?(obj.data[card.plannerCardData.groupField].Value=groupId,obj.data[card.plannerCardData.dateField].Value=dateInfo,obj.update()&&this.highlightItem(card,flexygo.colors.success)):flexygo.utils.execAsyncFunction(onMoveFunction,["entity","groupId","plannerDate","triggerElement"],[obj,groupId,dateInfo,$(card)]).then(newData=>{newData&&(this.setCardData(card,newData,this.currentModeSettings.CardsMode.find(element=>element.ModeCardId===card.plannerCardData.modeCardId)),this.highlightItem(card,flexygo.colors.success))}).catch(err=>{flexygo.msg.error(flexygo.utils.getErrorMessage(err))})}this.refreshCell(this.currentModeId,groupId,dateInfo);break;case"delete":flexygo.msg.confirm(flexygo.localization.translate("flxplanner.remove"),result=>{if(result){obj.read();let onDeleteFunction=card.plannerCardData.onDeleteFunction;flexygo.utils.isBlank(onDeleteFunction)?obj.delete()&&(obj.warningMessage?flexygo.msg.warning(obj.warningMessage):obj.successMessage?flexygo.msg.success(obj.successMessage):flexygo.msg.success(flexygo.localization.translate("flxmodule.deleted")),$(card).fadeOut("slow",function(){$(card).remove()})):flexygo.utils.execAsyncFunction(onDeleteFunction,["entity","groupId","plannerDate","triggerElement"],[obj,groupId,dateInfo,$(card)]).then(e=>{e&&$(card).fadeOut("slow",function(){$(card).remove()})}).catch(err=>{flexygo.msg.error(flexygo.utils.getErrorMessage(err))}),this.refreshCell(this.currentModeId,groupId,dateInfo)}});break;case"edit":obj.read(),flexygo.nav.openPage("edit",obj.objectName,obj.objectWhere,null,"popup",!1,$(this))}}dragScroll(){const eleX=$(this).find(".pln-table"),eleY=eleX;let pos={top:0,left:0,x:0,y:0};const mouseMoveHandler=function(e){const dx=e.clientX-pos.x,dy=e.clientY-pos.y;eleY.scrollTop(pos.top-dy),eleX.scrollLeft(pos.left-dx)},mouseUpHandler=function(){eleX.css({cursor:"grab"}),eleX.css("user-select",""),$(document).off("mousemove",mouseMoveHandler),$(document).off("mouseup",mouseUpHandler)};eleX.on("mousedown",function(e){0!==$(e.target).closest(".pln-card").length||$(e.target).hasClass(".pln-card")||(eleX.css({cursor:"grabbing",userSelect:"none"}),pos={left:eleX.scrollLeft(),top:eleY.scrollTop(),x:e.clientX,y:e.clientY},$(document).on("mousemove",mouseMoveHandler),$(document).on("mouseup",mouseUpHandler))})}getObjectWhere(card){let where="",id=JSON.parse(card.plannerCardData.id);return id.forEach((value,index)=>{where+=`[${card.plannerCardData.entityConfiguration.TableName}].[${Object.keys(value)[0]}] = '${value[Object.keys(value)[0]]}'${index<id.length-1?" AND ":""}`}),where}highlightItem(e,newBg){let olbBg=$(e).css("background-color");$(e).animate({"background-color":newBg},200).delay(200).animate({"background-color":olbBg},200)}configureMode(){flexygo.nav.openPage("edit","sysPlannerMode","PlannerModesObjects.PlannerModeId='"+this.currentModeId+"'",null,"popup",!0)}configure(){flexygo.nav.openPage("edit","sysPlanner","Planners.PlannerId='"+this.plannerId+"'",null,"popup",!0)}loadFilters(){if(this.searchSettings){let pane=$(this.wcParentModule).find(".cntBodyHeader .filterPanel"),filter=$("<flx-filter></flx-filter>"),wcFilter=filter[0];0==pane.length&&this.toolbar&&Object.keys(this.toolbar).length>0&&(pane=$('<div class="filterPanel"/>'),$(this.wcParentModule).find(".cntBodyHeader").append(pane)),pane.html(filter),wcFilter&&(wcFilter.settings=this.searchSettings,wcFilter.key=this.objectName+"-"+this.moduleName,wcFilter.grid=this,wcFilter.init())}}refreshDraggrableGroup(mode){let groupsContainer=$(`#pln-draggable-${mode}`);groupsContainer.empty();let cardConfig=this.currentModeSettings.CardsMode.filter(cardC=>cardC.ModeCardId==mode)[0],draggablecards=this.cardList.ItemsDraggable.filter(card=>card._cardconfigid==cardConfig.ModeCardId);draggablecards.length>0&&($(this).find("aside").removeClass("hidden"),groupsContainer.append(`<span class="pln-draggable-item-title">${cardConfig.DraggableTitle}</span>`),draggablecards.forEach(card=>{let descrip=flexygo.utils.parser.recursiveCompile(card,cardConfig.DraggableTemplate);flexygo.utils.isBlank(this.objDef)||(descrip=flexygo.utils.parser.recursiveCompile(this.objDef,descrip));let cardTemplate=$(`<div class="pln-card pln-card-draggable clickable" draggableidfield="${cardConfig.DraggableObjectId}" draggableidvalue="${card[cardConfig.DraggableObjectId]}" draggableobjectname="${cardConfig.DraggableCollection}">${descrip}</div>`)[0];this.setCardData(cardTemplate,card,cardConfig,!0),groupsContainer.append(cardTemplate)}))}refreshCell(modeId,rowIdField,dateColumn){let cards,params={PlannerModeId:modeId,CellDay:dateColumn,CellRowId:rowIdField};flexygo.ajax.post("~/api/Planner","GetCellCards",params,response=>{if(response){let cell=$(`.pln-cell.pln-date-cell[datecolumn="${dateColumn}"][rowidvalue="${rowIdField}"]`);cell.length>0&&(cell.children(".pln-card").remove(),(cards=response.Items).length>0)&&this.currentModeSettings.CardsMode.forEach(cardConfig=>{let currentCard=cards.filter(card=>card._cardconfigid==cardConfig.ModeCardId)[0];if(currentCard){let customClass=flexygo.utils.isBlank(cardConfig.CardClassNameField)?"":flexygo.utils.isBlank(currentCard[cardConfig.CardClassNameField])?"":currentCard[cardConfig.CardClassNameField],customStyle=flexygo.utils.isBlank(cardConfig.CardStyleField)?"":flexygo.utils.isBlank(currentCard[cardConfig.CardStyleField])?"":currentCard[cardConfig.CardStyleField],descrip=flexygo.utils.parser.recursiveCompile(currentCard,cardConfig.CardTemplate);if(descrip=flexygo.utils.parser.recursiveCompile({PlannerMode:this.currentTimemode},descrip),flexygo.utils.isBlank(this.objDef)||(descrip=flexygo.utils.parser.recursiveCompile(this.objDef,descrip)),cell.find(".pln-card")[0]&&cell.find(".pln-card")[0].plannerCardData.priority==cardConfig.Order.toString()||0==$(cell).find(".pln-card").length){let cardTemplate;cardTemplate=cardConfig.Editable?$(`<div class="pln-card pln-sortable ${customClass}" style="${customStyle}">\n                                        <span class="pln-card-edit clickable"><i class="flx-icon icon-pencil txt-notify icon-zoom-115"></i></span>\n                                        <span class="pln-card-delete clickable"><i class="fa fa-close txt-danger icon-zoom-115"></i></span>\n                                        ${descrip}\n                                    </div>`)[0]:$(`<div class="pln-card ${customClass}" style="${customStyle}">\n                                        ${descrip}\n                                    </div>`)[0],this.setCardData(cardTemplate,currentCard,cardConfig),cell.append(cardTemplate)}}})}})}}}(flexygo||(flexygo={})),window.customElements.define("flx-planner",flexygo.ui.wc.FlxPlanner);