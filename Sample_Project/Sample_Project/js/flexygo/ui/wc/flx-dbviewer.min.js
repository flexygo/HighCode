var flexygo,__awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value)})).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};!function(flexygo){!function(ui){!function(wc){class FlxDbViewerElement extends HTMLElement{constructor(){super(),this.connected=!1}init(){flexygo.events.off(this,"DbViewer","Preview"),flexygo.events.on(this,"DbViewer","Preview",this.handlePreviewButton);let me=$(this);me.append(`<flx-dbcombo class="size-m" name="cnnstring" PlaceHolder="${flexygo.localization.translate("objectmanager.selectcnnstring")}" ObjectName="SysObject" ViewName="CnnStrings" SQLValueField="ConnStringid" SQLDisplayField="Descrip" required data-msg-required="${flexygo.localization.translate("objectmanager.validselectcnnstring")}"><template><span TypeId="{{DbTypeId}}">{{Descrip}}</span></template></flx-dbcombo>`),this.connectionCombo=me.find('[name="cnnstring"]')[0],me.append("<erd-editor></erd-editor>"),this.editor=me.find("erd-editor")[0],this.editor.setPresetTheme({appearance:$(document.body).attr("mode")?$(document.body).attr("mode"):"light"});let schema=JSON.parse(this.editor.value);schema.settings.database=2,schema.settings.show=292,this.editor.value=JSON.stringify(schema),this.render(),this.setMainEvents()}refresh(){this.init()}render(){$(this.editor.shadowRoot).find(".root").append('<div class="scriptButton">\n                                      <button id="directExec" disabled>Execute Script</button>\n                                        <button id="options" disabled>\n                                            <span class="caret"></span>\n                                        </button>\n                                   </div>');let noPreviewLayout=$('<div class="noPreviewLayout"><h1>No Preview</h1></div>');$(this.editor.shadowRoot).find(".root").append(noPreviewLayout)}setMainEvents(){let me=this,button=$($(this.editor.shadowRoot).find(".root .scriptButton button#directExec"));button.off("click").on("click",function(){if(!me.missingConnection()){let json=JSON.parse(me.editor.value),tableNames=Object.keys(json.collections.tableEntities).map(key=>json.collections.tableEntities[key].name).join("|"),processparams=[{key:"ConnStringId",value:me.connectionCombo.getValue()},{key:"Script",value:me.editor.getSchemaSQL()},{key:"TableNames",value:tableNames}];flexygo.nav.execProcess("CreateDataModel","","",null,processparams,"sliderightx50%",!1,null)}}),(button=$($(this.editor.shadowRoot).find(".root .scriptButton button#options"))).off("click").on("click",function(e){$(this).addClass("selected");let contextMenu=$("flx-contextmenu")[0],menu=$('<ul>\n                                <li><span class="btn1">With Test Data</span></li>\n                                <li><span class="btn2">Without Test Data</span></li>\n                                <li><span class="btn3">Generate Objects</span></li>\n                            </ul>');menu.find("span.btn1").on("click",function(){me.missingConnection()||(flexygo.utils.showLoading(null,"Generating Test Data"),me.getTestData(me.connectionCombo.getValue())),$("flx-contextmenu")[0].destroy()}),menu.find("span.btn2").on("click",function(){$($(me.editor.shadowRoot).find(".root .scriptButton button#directExec")).trigger("click"),$("flx-contextmenu")[0].destroy()}),menu.find("span.btn3").on("click",function(){let json=JSON.parse(me.editor.value),tables=Object.keys(json.collections.tableEntities).map(key=>json.collections.tableEntities[key].name).join("|").split("|");if(0==tables[0].length)flexygo.msg.warning("You need to generate the datamodel."),(contextMenu=$("flx-contextmenu")[0]).destroy();else if(me.missingConnection())(contextMenu=$("flx-contextmenu")[0]).destroy();else{let tablesTitle=$('<h4 class="table-menu">Which tables?</h4>'),tablesList=$('<ul class="table-menu">');tables.forEach(table=>{tablesList.append(`<li><span><input type="checkbox">${table}</span></li>`)});let buttons=$('<div class="table-menu-buttons">\n                                            <button class="table-menu-buttons ok-button" disabled>Accept</button>\n                                            <button class="table-menu-buttons cancel-button">Cancel</button>\n                                        </div>'),lastSelectedIndex=null;tablesList.find("li").on("click",function(e){let currentIndex=$(this).index();if(e.shiftKey&&null!==lastSelectedIndex){let start=Math.min(lastSelectedIndex,currentIndex),end=Math.max(lastSelectedIndex,currentIndex);tablesList.find("li").slice(start,end+1).each(function(){$(this).addClass("selected"),$(this).find('input[type="checkbox"]').prop("checked",!0)})}else $(this).hasClass("selected")?($(this).removeClass("selected"),$(this).find('input[type="checkbox"]').prop("checked",!1)):($(this).addClass("selected"),$(this).find('input[type="checkbox"]').prop("checked",!0)),lastSelectedIndex=currentIndex;0==$("ul.table-menu li.selected").length?$("button.table-menu-buttons.ok-button").prop("disabled",!0):$("button.table-menu-buttons.ok-button").removeAttr("disabled")}),buttons.find("button").on("click",function(e){if($(this).hasClass("ok-button")){let tablesToCreate=[];$("ul.table-menu li.selected").each(function(){tablesToCreate.push($(this).text())}),me.generateObjects(me.connectionCombo.getValue(),tablesToCreate)}(contextMenu=$("flx-contextmenu")[0]).destroy()}),contextMenu.createMenu(null).append(tablesTitle).append(tablesList).append(buttons),contextMenu.show({top:e.clientY-(46+43.8*tables.length+66),left:e.clientX})}}),contextMenu.createMenu(null).append(menu),contextMenu.show({top:e.clientY-75,left:e.clientX})}),button.blur(function(e){if($(this).removeClass("selected"),e.relatedTarget){$("flx-contextmenu")[0].destroy()}}),$(this.editor).blur(()=>{$(me.editor.shadowRoot).find(".context-menu-content").remove()})}missingConnection(){if(flexygo.utils.isBlank(this.connectionCombo.getValue())){flexygo.msg.warning("You need to select a connection chain."),$(this.connectionCombo).find(".input-group").css("border","1px solid var(--danger-color)");const removeBorder=()=>{$(this.connectionCombo).find(".input-group").css("border","none"),this.connectionCombo.inputval.off("change",removeBorder)};return this.connectionCombo.inputval.off("change").on("change",removeBorder),!0}return!1}setSchemaSQL(value){let schema=JSON.parse(this.editor.value);"ERD"!=schema.settings.canvasType&&(schema.settings.canvasType="ERD",this.editor.value=JSON.stringify(schema)),value=(value=flexygo.utils.isBlank(value)?"":value).replace(/[\[\]]/g,""),flexygo.utils.isBlank(value)?($(this.editor.shadowRoot).find(".root .noPreviewLayout").css("display","flex"),$($(this.editor.shadowRoot).find(".root .scriptButton button")).attr("disabled","disabled"),this.editor.clear()):($(this.editor.shadowRoot).find(".root .noPreviewLayout").css("display","none"),$($(this.editor.shadowRoot).find(".root .scriptButton button")).removeAttr("disabled"),this.editor.setSchemaSQL(value))}getTestData(connection){let me=this,chatgpt=$(this).closest("main").find("flx-ai");if(chatgpt.length>0){let settings=JSON.parse(JSON.stringify(chatgpt[0].settings));settings.SystemPrompt="Generate 5 INSERTS for each table. Use fictional and suitable data for each type of column. DO NOT CREATE, INSERT!!!";let messages=[{role:"user",content:this.editor.getSchemaSQL()}];settings.ImplementedTools="generateTestData";let params={Chat:settings,Messages:JSON.stringify(messages)};flexygo.ajax.post("~/api/AI","RequestChatGPT",params,response=>{if(response){let resp=JSON.parse(response);if(resp.error)flexygo.msg.warning(resp.error.message,null,"It was not possible to generate test data");else if(resp.choices&&resp.choices[0]&&resp.choices[0].message.content){let json=JSON.parse(me.editor.value),tableNames=Object.keys(json.collections.tableEntities).map(key=>json.collections.tableEntities[key].name).join("|");flexygo.utils.removeLoadingEffect(null),flexygo.nav.openProcessParams("CreateDataModel","","",{connection,script:me.editor.getSchemaSQL(),inserts:resp.choices[0].message.content,tables:tableNames},"sliderightx50%",!1)}else flexygo.msg.warning("It was not possible to generate test data")}})}}handlePreviewButton(e){let code=$(e.sender).closest(".chat_ai_text").find("flx-code").attr("value");this.setSchemaSQL(code)}generateObjects(connection,tables){var _a;return __awaiter(this,void 0,void 0,function*(){let me=this,chatgpt=$(this).closest("main").find("flx-ai");if(flexygo.utils.showLoading(null,"Generating Objects"),chatgpt.length>0){let settings=JSON.parse(JSON.stringify(chatgpt[0].settings));settings.CanCallProcesses="true",settings.ToolsCategory="process",settings.SystemPrompt="Create objects for database tables. YOU DO NOT NEED THE VIEW KEYS",settings.ImplementedTools="createObject",settings.ConnectionString=connection;let results="",objectNames=[];for(const table of tables){let messages=[{role:"user",content:"Create the object for the database table '"+table+"' with the dafault values"}],params={Chat:settings,Messages:JSON.stringify(messages)},result=yield me.apiObjectCreationCall(params,table);results+=result,objectNames.push(result.split(" ")[2])}let objectWhere="ObjectName=''";objectNames.forEach(objName=>{objectWhere+=` OR ObjectName='${objName}'`}),null===(_a=$("#mainNav")[0])||void 0===_a||_a.refresh(),flexygo.utils.removeLoadingEffect(),flexygo.msg.alert(results,()=>{flexygo.nav.openPage("list","sysObjects",objectWhere,null,"popup")},"Summary")}})}apiObjectCreationCall(params,table){return new Promise((resolve,reject)=>{flexygo.ajax.post("~/api/AI","RequestChatGPT",params,response=>{if(response){let resp=JSON.parse(response);resp.error?reject(`<hr><p><strong>${table}</strong>: ${resp.error.message}</p>`):resp.choices&&resp.choices[0]&&resp.choices[0].message.content?resolve(`<hr><p><strong>${table}</strong>: ${resp.choices[0].message.content}</p>`):reject(`<hr><p><strong>${table}</strong>: ERROR: Empty or malformed response</p>`)}else reject(`<hr><p><strong>${table}</strong>: ERROR: No response from server</p>`)},()=>{reject()})}).catch(()=>`<hr><p><strong>${table}</strong>: <strong style="color: red;">Critical error</strong></p>`)}connectedCallback(){this.connected=!0;0==$(document.head).find('script[class="dbviewer"]').length?$(document.head).append("\n            <script class=\"dbviewer\">\n                import('../../../js/plugins/erd-editor/erd-editor.js').then((module) => {\n                    $('flx-dbviewer')[0].init();\n                    $('flx-dbviewer').closest(\"flx-module\")[0].moduleLoaded();\n                }).catch((error) => {\n                    console.error('Error al cargar el módulo:', error);\n                });\n            <\/script>\n            "):(this.init(),this.closest("flx-module").moduleLoaded())}attributeChangedCallback(attrName,oldVal,newVal){this.connected}disconnectedCallback(){$("flx-contextmenu")[0].destroy()}}FlxDbViewerElement.observedAttributes=["settings"],wc.FlxDbViewerElement=FlxDbViewerElement}(ui.wc||(ui.wc={}))}(flexygo.ui||(flexygo.ui={}))}(flexygo||(flexygo={})),window.customElements.define("flx-dbviewer",flexygo.ui.wc.FlxDbViewerElement);