/**
 * @namespace flexygo.ui.wc
 */
declare namespace flexygo.ui.wc {
    /**
    * Library for the FlxNavElement web component.
    *
    * @class FlxAreaElement
    * @constructor
    * @return {FlxAreaElement}
    */
    class FlxAreaElementBreadCrumbItem {
        id: string;
        title: string;
    }
    class FlxAreaElement extends HTMLElement {
        constructor();
        /**
        * Set when component is attached to DOM
        * @property connected {boolean}
        */
        connected: boolean;
        method: string;
        methodParams: any;
        backNode: string;
        initNode: string;
        currentNode: flexygo.api.navigation.NavigationNode;
        breadcrumArray: FlxAreaElementBreadCrumbItem[];
        /**
        * vis.js dataset nodes object
        * @property nodes {vis.DataSet}
        */
        nodes: vis.DataSet<vis.Node>;
        /**
        * vis.js dataset nodes object
        * @property nodes {vis.DataSet}
        */
        edges: vis.DataSet<vis.Edge>;
        /**
        * HTML tag identifier
        * @property uuid {string}
        */
        uuid: string;
        /**
        * vis.js network object
        * @property network {vis.Network}
        */
        network: vis.Network;
        /**
        * Fires when element is attached to DOM
        * @method connectedCallback
        */
        connectedCallback(): void;
        static readonly observedAttributes: any[];
        /**
      * Fires when the attribute value of the element is changed.
      * @method attributeChangedCallback
      * @param {String} attrName. The attribute name
      * @param {String} oldVal. The old value
      * @param {String} newVal.the new value
      */
        attributeChangedCallback(attrName: any, oldVal: any, newVal: any): void;
        /**
        * Init the webcomponent.
        * @method init
        */
        init(): void;
        /**
        * Refresh de webcomponent.
        * @method refresh
        */
        refresh(): void;
        /**
        * Does post to load Areas Nodes.
        * @method loadNodes
        */
        loadNodes(): void;
        /**
        * loads Nodes with post result.
        * @method loadNodesRet
        * @param {Array} ret. an array with the nodes
        */
        loadNodesRet(ret: flexygo.api.navigation.NavigationNode[]): void;
        onNodeContext(params: any): void;
        /**
        * Handles click on network graphics
        * @method onNodeClick
        * @param {any} parms. The event param
        */
        onNodeClick(params: any): void;
        private setMultiline;
        /**
       * get Node icon
       * @method getIcon
       * @param {String} IconClass. The icon class
        * @param {String} IconPath. The icon path
       */
        getIcon(IconClass: string, IconPath: string): string;
        /**
      * Gets current breadcrum
      * @method getBreadcrum
      *  @param  json. Json elements
      * @return {string}
      */
        getBreadcrum(json: flexygo.api.navigation.NavigationNode): string;
        /**
       * Replace nodes with new parent id childs. Does not work with autogenerated nodes
       * @method diveIn
       * @param  {string} nodeId. The node id
       * @param {string} title. The node title
       */
        diveIn(nodeId: string, title: string): void;
        /**
        * Goas back to original node
        * @method goBack
        * @param {String} nodeId. New parent node
   
        */
        goBack(): void;
        /**
        * Goas back until node is reached
        * @method goBack
        * @param {String} nodeId. New parent node
   
        */
        goNode(nodeId: string): void;
        /**
      * Sees if node has childnodes an returns the noshow class
      * @method getNoShow
      * @param  json. Json elements
      * @param {string} mode. check for parent ,child or process mode
      */
        getNoShow(json: flexygo.api.navigation.NavigationNode, mode: string): string;
        private toUnicode;
    }
}
