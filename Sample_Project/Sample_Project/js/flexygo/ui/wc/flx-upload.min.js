var flexygo,__awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value)})).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};!function(flexygo){!function(ui){!function(wc){wc.FlxUploadElement=class extends HTMLElement{constructor(){super(),this.connected=!1,this.value=null,this.mode="object",this.uploadFileTemplate=((fileId,name,extension,base64)=>`<div class="upload-file" upload-file-id="${fileId}">\n                                                                                                                                    <div>\n                                                                                                                                        <i class="size-l fa ${flexygo.utils.getFileIcon(extension)}"/>\n                                                                                                                                        <small>${name}</small>\n                                                                                                                                    </div>\n                                                                                                                                    <div>\n                                                                                                                                        <a href="${base64}" download="${name+extension}">\n                                                                                                                                            <i class="flx-icon icon-download-1 upload-file-download"></i>\n                                                                                                                                        </a>\n                                                                                                                                        <i class="flx-icon icon-close-2 upload-file-delete"></i>\n                                                                                                                                    </div>\n                                                                                                                                 </div>`)}connectedCallback(){let element=$(this);if(this.connected=!0,this.objectName=element.attr("ObjectName"),this.objectWhere=element.attr("ObjectWhere"),this.moduleName=element.attr("ModuleName"),this.processName=element.attr("ProcessName"),this.property=element.attr("Property"),this.type=element.attr("Type"),this.rootPath=element.attr("RootPath")||element.attr("Path"),this.property){let parentCtl=element.closest("flx-edit,flx-list,flx-propertymanager,flx-view,flx-filter");parentCtl&&parentCtl.length>0&&(this.options=jQuery.extend(!0,{},parentCtl[0].properties[this.property]),parentCtl[0].mode&&(this.mode=parentCtl[0].mode))}"true"!=element.attr("manualInit")&&this.init()}observedAttributes(){return["modulename","objectname","objectwhere","processname","property","type","rootpath","path"]}attributeChangedCallback(attrName,oldVal,newVal){if(this.connected&&!0===this.connected){let needInit=!1;"modulename"==attrName.toLowerCase()&&newVal&&""!=newVal?(this.moduleName=newVal,needInit=!0):"objectname"==attrName.toLowerCase()&&newVal&&""!=newVal?(this.objectName=newVal,needInit=!0):"objectwhere"==attrName.toLowerCase()&&newVal&&""!=newVal?(this.objectWhere=newVal,needInit=!0):"processname"===attrName.toLowerCase()&&newVal&&""!==newVal?(this.processName=newVal,needInit=!0):"property"===attrName.toLowerCase()&&newVal&&""!==newVal?(this.property=newVal,needInit=!0):"type"===attrName.toLowerCase()&&newVal&&""!==newVal?(this.type=newVal,needInit=!1):"rootpath"!==attrName.toLowerCase()&&"path"!==attrName.toLowerCase()||!newVal||""===newVal||(this.rootPath=newVal,needInit=!1),needInit&&this.init()}}disconnectedCallback(){}init(){this.getConfig()}refresh(){}render(){var rendered;let accept="";(this.options&&this.options.RegExp||this.options&&this.options.Extensions)&&(this.options.RegExp?accept=this.options.RegExp:this.options.Extensions&&"sysAll"!=this.options.ExtensionId&&(accept=flexygo.utils.parser.replaceAll(this.options.Extensions,"|",",")));let renderMode=$(this).attr("mode");renderMode=flexygo.utils.isBlank(renderMode)?"edit":renderMode.toLowerCase(),rendered=`${this.customCSS?`<style>${this.customCSS}</style>`:""}\n                        <div class="upload-container" style="${this.options&&this.options.Locked?"cursor: no-drop":""}">\n                            <div class="upload-drag-container">\n                                <span class="txt-primary">\n                                    <i class="flx-icon icon-upload-1"/> ${flexygo.localization.translate("upload.info")}\n                                </span>\n                                <div class="uploaded-flies">\n                                </div>\n                            </div>\n                               \n                             ${this.options&&this.options.Locked?"":`<label class="btn upload-btn${"preview"==renderMode?" disabled":""}">\n                               <i class="fa fa-search"></i><input type="file" accept="${accept}" class="hide" multiple/>\n                                   </label>`}\n                        </div>\n                        ${this.customScript?"<script>"+this.customScript+"<\/script>":""}`,$(this).html(rendered),$(this).find("div.upload-container > *").css("pointer-events","none"),"preview"!==renderMode&&this.mainEvents()}mainEvents(){let me=$(this);me.removeAttr("manualInit"),$(this).closest("flx-module").find(".flx-noInitContent").remove();let ctx=this;var dragDropZone;function traverseFileTree(item,path,errorUploadFileCounter=0){return __awaiter(this,void 0,void 0,function*(){try{if(path=path||"",item.isFile){const file=yield new Promise((resolve,reject)=>{item.file(resolve,reject)});return(yield documentReader(file,path))?errorUploadFileCounter:errorUploadFileCounter+1}if(item.isDirectory){let dirReader=item.createReader(),entries=yield new Promise((resolve,reject)=>{dirReader.readEntries(resolve,reject)});for(const entry of entries)errorUploadFileCounter=yield traverseFileTree(entry,path+item.name+"/",errorUploadFileCounter);return errorUploadFileCounter}}catch(ex){return errorUploadFileCounter+1}})}function documentReader(file,path){return __awaiter(this,void 0,void 0,function*(){try{var params,name,extension,reader=new FileReader;name=file.name.substring(0,file.name.lastIndexOf(".")),extension=file.name.substring(file.name.lastIndexOf(".")).toLowerCase();let uploaded=new Promise(resolve=>{reader.onload=function(e){let fileId,uploaded=!1;if("file"===ctx.type){ctx.rootPath=ctx.rootPath.replace("\\","/"),path=ctx.rootPath.endsWith("/")||path.startsWith("/")?ctx.rootPath+path:ctx.rootPath+"/"+path;let objectName=null,propertyName=null,formValues=[];if(ctx.options){let module=$(ctx).closest("flx-edit");if(module.length>0){let props=module.find("[property]");if(props.length>0)for(var i=0;i<props.length;i++){let prop=$(props[i])[0];formValues.push({key:prop.property,value:prop.getValue()})}}objectName=ctx.options.ProcessName||ctx.options.ReportName||ctx.options.ObjectName,propertyName=ctx.options.Name}params={Base64:reader.result.split(",")[1],Name:file.name,Path:path,Mode:ctx.mode,ObjectName:objectName,PropertyName:propertyName,FormValues:formValues},flexygo.ajax.post("~/api/Upload","Upload",params,response=>{if(response&&!response.uploadError){if(fileId=ctx.setValue({type:ctx.type,moduleName:ctx.moduleName,objectName:ctx.objectName,objectWhere:ctx.objectWhere,processName:ctx.processName,property:ctx.property,path:response.path,name,extension}),ctx.options&&ctx.options.CauseRefresh){let ev={class:"property",type:"changed",sender:ctx,masterIdentity:ctx.property};flexygo.events.trigger(ev,me)}uploaded=!0}else uploaded=!1;me.trigger("upload",[fileId-1,ctx.type,ctx.moduleName,ctx.objectName,ctx.objectWhere,ctx.processName,ctx.property,response.path,name,extension,reader.result]),resolve(uploaded)})}else"base64"===ctx.type&&(ctx.options.Extensions.toLowerCase().split("|").indexOf(extension)>-1||"sysAll"==ctx.options.ExtensionId?(fileId=ctx.setValue({type:ctx.type,moduleName:ctx.moduleName,objectName:ctx.objectName,objectWhere:ctx.objectWhere,processName:ctx.processName,property:ctx.property,path,name,extension,base64:reader.result}),me.trigger("upload",[fileId-1,ctx.type,ctx.moduleName,ctx.objectName,ctx.objectWhere,ctx.processName,ctx.property,path,name,extension,reader.result]),resolve(!0)):resolve(!1))}});return reader.readAsDataURL(file),uploaded}catch(ex){return!1}})}this.options&&this.options.Locked||(dragDropZone=me.find("div.upload-container"),me.find('input[type = "file"]').off("input.upload").on("input.upload",e=>{try{let promises=[];me.find("div.upload-drag-container").addClass("upload-uploading"),me[0].paintUploadingFiles(me);for(let it of e.currentTarget.files){let promise=documentReader(it,"").then(notuploaded=>notuploaded);promises.push(promise)}Promise.all(promises).then(results=>{const errorUploadFileCounter=results.reduce((acc,current)=>!1===current?acc+1:acc,0);errorUploadFileCounter>0?flexygo.msg.warning(`${errorUploadFileCounter} files failed in uploading process`):flexygo.msg.success("upload.uploaded"),me[0].removeUploadingFiles($(this)),me.find("div.upload-drag-container").removeClass("upload-uploading")}).catch(error=>{me[0].removeUploadingFiles($(this)),me.find("div.upload-drag-container").removeClass("upload-uploading"),flexygo.msg.error(error)})}catch(ex){}}),me.off("upload.upload").on("upload.upload",(event,fileId,type,moduleName,objectName,objectWhere,processName,property,path,name,extension,base64)=>{$(ctx.uploadFileTemplate(fileId,name,extension,base64)).appendTo(me.find(".upload-drag-container > .uploaded-flies")).find(".upload-file-delete").off("click.upload").on("click.upload",e=>{var _a,_b;let values,fileElement=$(e.currentTarget).closest(".upload-file"),fileId=fileElement.attr("upload-file-id");(values=JSON.parse(this.value)).splice(parseInt(fileId),1),this.value=JSON.stringify(values),fileElement.remove();const input=me.find('.upload-btn input[type="file"]')[0];let uploadedFiles=null===(_a=me.find('.upload-btn input[type="file"]')[0])||void 0===_a?void 0:_a.files;const dt=new DataTransfer;for(let file of uploadedFiles)file.name!=(null===(_b=fileElement.find("a"))||void 0===_b?void 0:_b.attr("download"))&&dt.items.add(file);input.files=dt.files})}),dragDropZone.off("mouseenter.upload").on("mouseenter.upload",()=>{me.find("div.upload-container > *").css("pointer-events","auto")}),dragDropZone.off("mouseleave.upload").on("mouseleave.upload",()=>{me.find("div.upload-container > *").css("pointer-events","none")}),dragDropZone.off("dragover.upload").on("dragover.upload",e=>{e.preventDefault(),e.stopPropagation(),e.originalEvent&&e.originalEvent.dataTransfer&&(e.originalEvent.dataTransfer.dropEffect="copy"),me.find("div.upload-drag-container").addClass("upload-dragging")}),dragDropZone.off("dragleave.upload").on("dragleave.upload",e=>{e.preventDefault(),e.stopPropagation(),e.originalEvent&&e.originalEvent.dataTransfer&&(e.originalEvent.dataTransfer.dropEffect="copy"),me.find("div.upload-drag-container").removeClass("upload-dragging")}),dragDropZone.off("drop.upload").on("drop.upload",e=>{var items;try{if(e.originalEvent&&e.originalEvent.dataTransfer){me.find("div.upload-drag-container").addClass("upload-uploading"),me[0].paintUploadingFiles(me),e.originalEvent.dataTransfer.dropEffect="copy",items=e.originalEvent.dataTransfer.items;let promises=[];for(let it of items){let item=it.webkitGetAsEntry();if(item){let promise=traverseFileTree(item,null).then(notuploaded=>notuploaded);promises.push(promise)}}Promise.all(promises).then(results=>{const errorUploadFileCounter=results.reduce((total,notuploaded)=>total+notuploaded,0);errorUploadFileCounter>0?flexygo.msg.warning(`${errorUploadFileCounter} files failed in uploading process`):flexygo.msg.success("upload.uploaded"),me[0].removeUploadingFiles($(this)),me.find("div.upload-drag-container").removeClass("upload-dragging"),me.find("div.upload-drag-container").removeClass("upload-uploading")}).catch(error=>{me[0].removeUploadingFiles($(this)),me.find("div.upload-drag-container").removeClass("upload-uploading"),flexygo.msg.error(error)})}e.preventDefault()}catch(ex){me[0].removeUploadingFiles($(this)),me.find("div.upload-drag-container").removeClass("upload-uploading")}}))}paintUploadingFiles(input){let containerItem=input.parent();containerItem.addClass("flx-relative"),containerItem.find("form").addClass("flx-opacity"),0==containerItem.find("#flx-dependency-loader").length&&containerItem.append('<div id="flx-dependency-loader"></div>')}removeUploadingFiles(input){let containerItem=input.parent();containerItem.removeClass("flx-relative"),containerItem.find("form").removeClass("flx-opacity"),containerItem.find("#flx-dependency-loader").remove()}getConfig(){try{let me=$(this);var defaults;this.options?(this.customCSS=this.options.Style,this.rootPath=this.options.RootPath,this.objectName=this.options.ObjectName,this.processName=this.options.ProcessName,this.render()):this.moduleName?(defaults={ObjectName:this.objectName,ObjectWhere:this.objectWhere,ModuleName:this.moduleName,PageName:flexygo.history.getPageName(me)},flexygo.ajax.post("~/api/Upload","GetConfig",defaults,response=>{response&&(this.customCSS=response.cssText,this.customScript=response.scriptText,this.rootPath=response.path,this.render())})):this.render()}catch(ex){flexygo.msg.error("upload.error")}}setValue(value){try{let values,position;if("string"==typeof value)this.value=value;else if(null!=value&&""!=value.toString())return position=(values=JSON.parse(this.value?this.value:"[]")).push(value),this.value=JSON.stringify(values),position}catch(ex){flexygo.msg.error("upload.error")}}getValue(){try{return this.value}catch(ex){flexygo.msg.error("upload.error")}}}}(ui.wc||(ui.wc={}))}(flexygo.ui||(flexygo.ui={}))}(flexygo||(flexygo={})),window.customElements.define("flx-upload",flexygo.ui.wc.FlxUploadElement);