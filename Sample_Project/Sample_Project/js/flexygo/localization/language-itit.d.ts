/**
 * @namespace flexygo.culture.itit
 */
declare namespace flexygo.culture.itit {
    const process: {
        executing: string;
        loadingdata: string;
    };
    const dependecymanager: {
        sort: string;
        valuedep: string;
        classdep: string;
        combodep: string;
        enabledep: string;
        visibledep: string;
        requireddep: string;
        CustomProperty: string;
        save: string;
        addmore: string;
        addmorefilter: string;
        sqlvalue: string;
        sqlclass: string;
        sqlcombofilter: string;
        sqlcombosentence: string;
        enabledvalues: string;
        disabledvalues: string;
        sqlenabledsentence: string;
        visiblevalues: string;
        hiddenvalues: string;
        visiblesentence: string;
        requiredvalues: string;
        notrequiredvalues: string;
        requiredsentence: string;
        description: string;
        valueApply: string;
        CusPropertyName: string;
        SQLCustomProperty: string;
        connectionstrings: string;
        connStringvalues: string;
        relateddep: string;
    };
    const develop: {
        developer: string;
        adminarea: string;
        help: string;
        dependencymanager: string;
        filtermanager: string;
        modulemanager: string;
        nodemanager: string;
        settings: string;
        wizard: string;
        editproperties: string;
        modules: string;
        collection: string;
        page: string;
        object: string;
        imagemanager: string;
        documentmanager: string;
        mailmanager: string;
        viewobject: string;
        security: string;
        objectsecurity: string;
        objectprocesssecurity: string;
        selectobject: string;
        objectpropertysecurity: string;
        pageSettings: string;
        chatter: string;
        users: string;
        roles: string;
    };
    const history: {
        historyempty: string;
        showmore: string;
    };
    const navigation: {
        relatedobjects: string;
        reports: string;
        noelements: string;
        popupwarning: string;
        reportmaxrows: string;
        scrolltop: string;
    };
    const msg: {
        confirm: string;
        fieldrequired: string;
        copied: string;
    };
    const flxkanban: {
        addCard: string;
    };
    const flxedit: {
        addfields: string;
        selectall: string;
        selectnone: string;
        createwarning: string;
        appendwarning: string;
        createfields: string;
        enterfieldname: string;
        reserveword: string;
        selecttype: string;
        seedependencies: string;
        templates: string;
        objectsettings: string;
        label: string;
        style: string;
        classname: string;
        selecticon: string;
        selectcontroltype: string;
        locked: string;
        required: string;
        hidden: string;
        addseparatora: string;
        addseparatorb: string;
        addplaceholder: string;
        save: string;
        close: string;
        areyousuretitle: string;
        areyousuremsg: string;
        areyousuremsgyes: string;
        areyousuremsgno: string;
        emptyproperty: string;
        addproperties: string;
        propertyname: string;
        propertylabel: string;
        adddetachedproperty: string;
        selecttable: string;
        loadmore: string;
        hasdependencies: string;
        hasdependingproperties: string;
        withchangeprocess: string;
        throwto: string;
        affectedby: string;
        persistdefaultvalue: string;
        defaultvalue: string;
        detachedproperty: string;
    };
    const flxeditgrid: {
        addrow: string;
        removeselection: string;
        hide: string;
        settings: string;
        deleteconfirm: string;
        startinfo: string;
    };
    const flxfilter: {
        searchplaceholder: string;
        showall: string;
    };
    const flxarea: {
        noprocesses: string;
        doubleclickexpand: string;
    };
    const flxgipe: {
        butonadd: string;
        buttonload: string;
        buttonsave: string;
        buttoncancel: string;
        dialogloadtitle: string;
        dialogsavetitle: string;
        dialogpropertiestitle: string;
        dialogtemplatetitle: string;
        dialogdebugtitle: string;
        errornoworkflowselected: string;
        errornoversionselected: string;
        confirmunsavedchanges: string;
        labelarea: string;
        labelmodule: string;
        labelname: string;
        labeldescrip: string;
        labelversion: string;
        labeltop: string;
        labelleft: string;
        labelheight: string;
        labelwidth: string;
        labellabel: string;
        labelobject: string;
        labelprocess: string;
        labelworkflow: string;
        labeldecission: string;
        labelevent: string;
        labelactive: string;
        labelstatus: string;
        labelresult: string;
        labelerrormessage: string;
        labelrelations: string;
        labeloutputparams: string;
        labelbackgroundcolor: string;
        labelbordercolor: string;
        labeltextcolor: string;
        treeinnode: string;
        treeoutnode: string;
        workflowareaplaceholder: string;
        workfloworiginplaceholder: string;
        workflowmoduleplaceholder: string;
        workflownameplaceholder: string;
        workflowversionplaceholder: string;
        searchtemplates: string;
        editortemplates: {
            process: string;
            object: string;
            decission: string;
            event: string;
            workflow: string;
            label: string;
            toggleall: string;
        };
        editortoolbar: {
            new: string;
            open: string;
            save: string;
            generate: string;
            up: string;
            down: string;
            run: string;
            debug: string;
            select: string;
            pan: string;
            undo: string;
            redo: string;
            cut: string;
            copy: string;
            paste: string;
            delete: string;
            group: string;
            ungroup: string;
            workflow: string;
            object: string;
            process: string;
            decission: string;
            event: string;
            connect: string;
            fit: string;
            zoomin: string;
            zoomout: string;
            actualsize: string;
            templates: string;
            label: string;
            properties: string;
        };
        messages: {
            savefirst: string;
            workflowgenerated: string;
            workflowsaved: string;
        };
        popupmenu: {
            workflowproperties: string;
            view: string;
            properties: string;
            enter: string;
            new: string;
            listparams: string;
        };
    };
    const filtermanager: {
        choosefilter: string;
        objectname: string;
        filtertype: string;
        properties: string;
        fields: string;
        unsaved: string;
        sure: string;
        add: string;
        errornofilter: string;
        errornofields: string;
        fieldnotappend: string;
        fieldsnotappend: string;
        save: string;
        delete: string;
        hasfilterdependencies: string;
        hasfilterdependingproperties: string;
        throwto: string;
        affectedby: string;
    };
    const sortmanager: {
        sort: string;
        fields: string;
        apply: string;
        clean: string;
        groups: string;
        applied: string;
    };
    const flxlist: {
        noentriesfound: string;
        warning: string;
        currentfiltervalues: string;
        removecurrentfiltervalues: string;
        name: string;
        generic: string;
        savefilter: string;
        selectfilterfirst: string;
        save: string;
    };
    const flxmail: {
        nomails: string;
        nosettings: string;
        loadmore: string;
        folders: string;
        address: string;
        subject: string;
        body: string;
        mindate: string;
        maxdate: string;
        unseen: string;
        sync: string;
        waitsync: string;
        nomail: string;
        nomailalert: string;
    };
    const flxmodule: {
        delete: string;
        save: string;
        new: string;
        edit: string;
        view: string;
        print: string;
        printpage: string;
        printmodule: string;
        help: string;
        settings: string;
        process: string;
        report: string;
        export: string;
        back: string;
        unknown: string;
        templates: string;
        noprop: string;
        requiredsaving: string;
        noparams: string;
        requiredrunning: string;
        requiredreport: string;
        deleted: string;
        saved: string;
        uniqueBagError: string;
        nofieldBagError: string;
        noItemsSelected: string;
        currentlyViewing: string;
    };
    const flxnav: {
        notimplemented: string;
        pIdNotespecified: string;
        urlnotespecified: string;
        autoSQlnovalidtype: string;
        webcomponentnotspecified: string;
        helpidnotspecified: string;
        moreinfo: string;
    };
    const image: {
        browsebutton: string;
        browsebuttontooltip: string;
        savebutton: string;
        removebutton: string;
        cropbutton: string;
        movebutton: string;
        zoombutton: string;
        rotatebutton: string;
        scalebutton: string;
        aspectratiobutton: string;
        resetbutton: string;
        downloadbutton: string;
        free: string;
        errorfiletype: string;
        errorfilenumber: string;
        infotostart: string;
        errorfilename: string;
        errorrootpath: string;
        extension: string;
    };
    const documentmanager: {
        upload: string;
        info: string;
        saved: string;
        save: string;
        return: string;
        removed: string;
        errorsaving: string;
        errorremoving: string;
        copy: string;
        preview: string;
        edit: string;
        remove: string;
        disk: string;
        diskfiles: string;
        diskfolders: string;
        drive: string;
        dropbox: string;
        download: string;
        link: string;
        filter: string;
        folderorfile: string;
        browsernotsupported: string;
        settings: string;
        permissionerror: string;
        documentempty: string;
        view: string;
        downloadall: string;
        nodocuments: string;
        msgremove: string;
        filterdocs: string;
    };
    const imagemanager: {
        upload: string;
        settings: string;
        msgremove: string;
        msgremoveall: string;
        removed: string;
        removedall: string;
        errorremoving: string;
        uploaded: string;
        erroruploading: string;
        updated: string;
        errorupdating: string;
        permissionerror: string;
        imageepmty: string;
        downloadall: string;
        deleteall: string;
        errordownload: string;
        noimages: string;
    };
    const upload: {
        uploaded: string;
        error: string;
        info: string;
        extension: string;
    };
    const file: {
        saved: string;
        errorsaving: string;
        resultbase64: string;
        extension: string;
    };
    const _export: {
        success: string;
        error: string;
        exportinglist: string;
        exportlimit: string;
    };
    const menumanager: {
        deleteMenu: string;
        deleteMenuquestion: string;
        empty: string;
        menus: string;
        new: string;
        refresh: string;
        moreoptions: string;
        delete: string;
        edit: string;
        submenus: string;
        newsubmenu: string;
        menuSecurity: string;
    };
    const modulemanager: {
        save: string;
        searchmodules: string;
        cancel: string;
        tabid: string;
        tabtitle: string;
        tabdescrip: string;
        selecttabicon: string;
        classification: string;
        addnewtabmodule: string;
        changepagerelation: string;
        configmodule: string;
        removemodule: string;
        events: string;
        security: string;
        tabMode: string;
    };
    const moduletab: {
        emptytabs: string;
        nocontent: string;
    };
    const nodemanager: {
        save: string;
        title: string;
        deletenode: string;
        deletenodequestion: string;
        addfields: string;
        cloneDependencies: string;
        relationshipOfDependencies: string;
    };
    const objectmanager: {
        selecticon: string;
        validicon: string;
        objectname: string;
        validobjectname: string;
        objectdescription: string;
        validobjectdescription: string;
        collectionname: string;
        validcollectionname: string;
        collectiondescription: string;
        validcollectiondescription: string;
        datasource: string;
        fromtable: string;
        fromview: string;
        fromnewtable: string;
        selectcnnstring: string;
        validcnnstring: string;
        selecttable: string;
        validorigin: string;
        newtablename: string;
        validnewtablename: string;
        viewkeyfields: string;
        validviewkeyfields: string;
        savecontinue: string;
        continue: string;
        listtemplate: string;
        edittemplate: string;
        viewtemplate: string;
        objectcreated: string;
        selectoption: string;
        listform: string;
        editform: string;
        objectconfig: string;
        collectionconfig: string;
        showrelations: string;
        saved: string;
        basicinfo: string;
        objectproperties: string;
        listsettings: string;
        displaysettings: string;
        end: string;
        colproperties: string;
        save: string;
        filtersettings: string;
    };
    const flxpropertymanager: {
        addfields: string;
        label: string;
        style: string;
        classname: string;
        selecticon: string;
        selectcontroltype: string;
        locked: string;
        required: string;
        hidden: string;
        addseparatora: string;
        addseparatorb: string;
        addplaceholder: string;
        save: string;
        close: string;
        hasdefinition: string;
    };
    const flxversioninfo: {
        currentversion: string;
        lastversion: string;
        updatedversion: string;
        pendingchanges: string;
        reviewchanges: string;
        newupdate: string;
        update: string;
        info: string;
        test: string;
        delete: string;
        deleting: string;
        updating: string;
        initupdate: string;
        estatusupdatingservice: string;
        estatuscheckingpackages: string;
        estatusdownloadingversion: string;
        estatusfinished: string;
        estatusupdatedatabase: string;
        estatusupdateiis: string;
        applicationwillreset: string;
        updatesuccessful: string;
        oldversion: string;
        newversion: string;
        confirmupdate: string;
        confirmdelete: string;
        infotitle: string;
        deletesuccessful: string;
        infoversion: string;
        infopath: string;
        infodatabase: string;
        confirmwarningtitle: string;
        confirmwarninglabel: string;
        switch: string;
        confirmswitch: string;
        releasenotes: string;
        oldversionvalue: string;
        customvalue: string;
        newversionvalue: string;
        manualvalue: string;
        applychanges: string;
        nochanges: string;
        changecount: string;
        applychangessuccesful: string;
    };
    const viewmanager: {
        properties: string;
        fields: string;
        unsaved: string;
        add: string;
        errornofilter: string;
        errornofields: string;
        errornosql: string;
        validate: string;
        errorduplicateprop: string;
        save: string;
        cancel: string;
        viewwizard: string;
        selectobject: string;
        openwizard: string;
        saved: string;
    };
    const templates: {
        addnewtemplate: string;
        openiconlist: string;
    };
    const flxscheduler: {
        objects: string;
        chooseobjects: string;
    };
    const flxscheduleryear: {
        january: string;
        february: string;
        march: string;
        april: string;
        may: string;
        june: string;
        july: string;
        august: string;
        september: string;
        october: string;
        november: string;
        december: string;
        mn: string;
        tu: string;
        we: string;
        th: string;
        fr: string;
        sa: string;
        su: string;
    };
    const flxsearch: {
        search: string;
        pleasewrite: string;
        speak: string;
        pleaseobject: string;
        searchnode: string;
    };
    const text: {
        map: string;
        errormap: string;
        api: string;
        apihelp: string;
        nophone: string;
        nomail: string;
        seeMap: string;
    };
    const flxfunnel: {
        data: string;
    };
    const flxtimeline: {
        withoutDescription: string;
        withoutRegisters: string;
        hour: string;
        today: string;
        day: string;
        week: string;
        month: string;
        year: string;
        navigation: string;
        range: string;
        title: string;
        description: string;
        action: string;
        selectitem: string;
        multiselectitems: string;
        multiselectbyrange: string;
        multiselectbyrangegroup: string;
        createitem: string;
        createitemwithrange: string;
        edititem: string;
        openeditview: string;
        zoom: string;
        navigationtime: string;
        or: string;
        to: string;
        withoutpercentage: string;
        notsupported: string;
    };
    const flxfilebrowser: {
        saved: string;
        errorsaving: string;
        errorremoving: string;
        permissionerror: string;
        documentempty: string;
        itemsselected: string;
        emptyfolder: string;
        existingfiles: string;
        overwritefiles: string;
        deleting: string;
        items: string;
        sure: string;
        currentfolder: string;
        uploadfiles: string;
        addfolder: string;
        download: string;
        delete: string;
        goback: string;
        processingdownload: string;
    };
    const chatter: {
        composerplaceholder: string;
        sendbutton: string;
        startinfo: string;
        deleteconfirm: string;
        saveButton: string;
    };
    const offline: {
        createobjecttitle: string;
        createobjectcontent: string;
        createobjectbuttonnew: string;
        createobjectbuttonbased: string;
        enablewebapiconfirmation: string;
    };
    const offlineemulator: {
        ios: string;
        md: string;
    };
    const combobuilder: {
        datasource: string;
        fromtable: string;
        fromview: string;
        selectcnnstring: string;
        validcnnstring: string;
        selecttable: string;
        validorigin: string;
        viewkeyfields: string;
        saved: string;
        save: string;
        cancel: string;
        selectvaluefield: string;
        selectdisplayfield: string;
        selectadditionalfield: string;
        selectorderfield: string;
        comboassistant: string;
        cnnstring: string;
        origin: string;
        sqlsentence: string;
        valuefield: string;
        displayfield: string;
        additionalfield: string;
        orderfield: string;
        validvaluefield: string;
        validdisplayfield: string;
        validorderfield: string;
        validsqlsentence: string;
    };
    const formatsmanager: {
        formatassistant: string;
        field: string;
        selectfield: string;
        validfield: string;
        validformat: string;
        selectformat: string;
        formattype: string;
        saved: string;
        nosaved: string;
        decimal: string;
        isdate: string;
        translate: string;
        save: string;
        cancel: string;
        casetrue: string;
        casefalse: string;
        boolformat: string;
        isnull: string;
        numdecimals: string;
        switchformat: string;
        casenotnull: string;
        stringformat: string;
        stringtype: string;
        validstringformat: string;
        uppercase: string;
        lowercase: string;
        characternumber: string;
        addoption: string;
        addelse: string;
        dateformat: string;
        selectdateformat: string;
        validdateformat: string;
        dateLT: string;
        dateLTS: string;
        dateL: string;
        datel: string;
        dateLL: string;
        datell: string;
        dateLLL: string;
        datelll: string;
        dateLLLL: string;
        datellll: string;
        translatesentence: string;
        option: string;
        risultato: string;
        elseoption: string;
        requiredobject: string;
    };
    const imports: {
        template: string;
    };
    const htmlreport: {
        generate: string;
    };
    const skin: {
        darkmode: string;
        lightmode: string;
    };
    const flxBarcode: {
        noCamera: string;
        IOSerr: string;
        noCode: string;
    };
    const abhSign: {
        save: string;
        title: string;
        help: string;
        lastPage: string;
    };
    const maintenance: {
        logoMini: string;
        title: string;
        subtitle: string;
        time: string;
    };
    const flxWacom: {
        titleError: string;
        serviceNotDetected: string;
        sigDataError: string;
        additionalDataError: string;
        renderBitmapError: string;
        extraDataError: string;
        sigCtrlCaptureError: string;
        sigCtrlConstructorError: string;
        DynCaptureError: string;
        error100: string;
        error101: string;
        error103: string;
        error200: string;
    };
    const mail: {
        fileSize: string;
        mailSize: string;
        maxSize: string;
    };
    const databaseScript: {
        infoGenerate: string;
        infoDownload: string;
        generate: string;
        download: string;
    };
}
